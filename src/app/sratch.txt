navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {
      // this.recordStream(stream)
      // this.analyze3D(stream)
      // let destinationStream = this.webAudioContext.createMediaStreamDestination()
    
      console.log('des stream', destinationStream)

      this.recordStream(destinationStream.stream)
      this.analyze3D(destinationStream)
      
      // if(!(this.webAudioContext.state === 'suspended')) {
      //   console.log('running')
      //   this.recordStream(stream)
      //   this.analyze3D(stream)
      // }

      console.log('audio state::', this.webAudioContext.state)
      

    

      // if(this.webAudioContext.state === 'suspended') {
      //   this.webAudioContext.resume().then(function() {
      //     console.log('resuming')
      //   });
      // }
  
      // if(resFlag) {
      //   this.webAudioContext.resume()
      // }
    })


    ****************** time seek 
    
<!-- 
     audioFile.addEventListener('timeupdate',function (){
    	var duration = parseInt(audioFile.duration, 10);
    	var elapsed = parseInt(audioFile.duration - audioFile.currentTime, 10);
    	$("#handle").attr("max", parseInt(audioFile.duration, 10));
        $("#handle").val(audioFile.currentTime);
        $('#timeleft').text(convertTime(elapsed));
        $('#length').text(convertTime(duration));
    });   
    
    //convert time given in seconds to min:sec format
    function convertTime (time) {
    	var min = Math.floor(parseInt((time/60), 10));
    	var sec = time - min*60;
    	return (min + ':' + (sec > 9 ? sec : '0' + sec));
    	
    }
    
 -->


 ****** visaulaiz
 function drawVisualiser(bufferLength: number, x: number, barWidth: number, barHeight: number, dataArray: any, ctx: CanvasRenderingContext2D, canvas: { width: number; height: number; }) {
      for (let i = 0; i < bufferLength; i++) {
        console.log('fuff lentgh', bufferLength)
        barHeight = dataArray[i] * 1.5;
        ctx.save();
        let x = Math.sin(i * Math.PI / 180) + 100;
        let y = Math.cos(i * Math.PI / 180) + 100;
        ctx.translate(canvas.width / 2 + x, canvas.height / 2)
        ctx.rotate(i + Math.PI * 2 / bufferLength);

        const hue = i * 0.6 + 200;
        ctx.fillStyle = 'hsl(' + hue + ',100%, 50%)';
        ctx.strokeStyle = 'hsl(' + hue + ',100%, 50%)';

        ctx.shadowOffsetX = 10;
        ctx.shadowOffsetY = 10;
        ctx.shadowBlur = 8;
        ctx.shadowColor = 'rgba(0,0,0,1)';

        ctx.globalCompositeOperation = 'source-over';

        // line
        ctx.lineWidth = barHeight / 5;
        ctx.beginPath();
        ctx.moveTo(x, y);
        ctx.lineTo(x, y - barHeight);
        ctx.lineCap = "round";
        ctx.stroke();
        ctx.closePath();

        // circle
        ctx.beginPath();
        ctx.arc(0, y + barHeight, barHeight / 10, 0, Math.PI * 2);
        ctx.fill();
        ctx.lineWidth = 1.5;
        ctx.strokeStyle = 'hsl(1, 100%, ' + i / 3 + '%)';
        ctx.stroke();

        ctx.restore();
        x += barWidth;
      }
    }